---
import globalConfig from "../../global.config.yml";
import { useTranslations } from "../i18n/utils";

interface Props {
  rollSlug: string;
  imageIndex: number;
  existingHighlights?: string | null;
}

const t = useTranslations();
const { rollSlug, imageIndex, existingHighlights } = Astro.props as Props;
const { features } = globalConfig;

// Type for features/highlights
type Feature = string;
---

<dialog
  id={`highlight-dialog-${imageIndex}`}
  class="w-full max-w-md rounded-lg p-6 backdrop:bg-black/80 backdrop:backdrop-blur-sm"
  data-login-required={t("component.highlightDialog.loginRequired")}
  data-error={t("component.highlightDialog.error")}
  data-success={t("component.highlightDialog.success")}
>
  <form
    id={`highlight-form-${imageIndex}`}
    class="space-y-4"
    onsubmit="return false;"
  >
    <!-- Highlight Form -->
    <div id={`form-content-${imageIndex}`}>
      <h2 class="mb-4 text-xl font-semibold">
        {t("component.highlightDialog.title")}
      </h2>
      {
        existingHighlights && (
          <p class="mb-4 font-normal">
            {t("component.highlightDialog.existingHighlights", {
              highlights: existingHighlights,
            })}
          </p>
        )
      }
      <div class="mb-4">
        <label for={`highlight-${imageIndex}`} class="mb-2 block text-sm"
          >{t("component.highlightDialog.select")}</label
        >
        <select
          name="highlight"
          id={`highlight-${imageIndex}`}
          class="w-full rounded border border-gray-300 p-2 dark:border-gray-600 dark:bg-gray-800"
          required
        >
          <option value=""
            >{t("component.highlightDialog.selectPlaceholder")}</option
          >
          {
            features.map((feature: Feature) => (
              <option value={feature}>{feature}</option>
            ))
          }
        </select>
      </div>

      <div class="flex justify-end gap-2">
        <button
          type="button"
          id={`cancel-highlight-${imageIndex}`}
          class="rounded-md border px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-800"
        >
          {t("component.highlightDialog.cancel")}
        </button>
        <button
          type="submit"
          id={`submit-highlight-${imageIndex}`}
          class="rounded-md bg-gray-800 px-4 py-2 text-sm text-white hover:bg-gray-700 dark:bg-gray-700 dark:hover:bg-gray-600"
        >
          {t("component.highlightDialog.submit")}
        </button>
      </div>
    </div>

    <!-- Feedback Message -->
    <div id={`feedback-content-${imageIndex}`} class="hidden space-y-4">
      <div id={`feedback-message-${imageIndex}`} class="text-center"></div>
      <div class="flex justify-center gap-2">
        <button
          type="button"
          id={`try-again-button-${imageIndex}`}
          class="hidden rounded-md border px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-800"
        >
          {t("component.highlightDialog.tryAgain")}
        </button>
        <button
          type="button"
          id={`dismiss-button-${imageIndex}`}
          class="hidden rounded-md bg-gray-800 px-4 py-2 text-sm text-white hover:bg-gray-700 dark:bg-gray-700 dark:hover:bg-gray-600"
        >
          {t("component.highlightDialog.dismiss")}
        </button>
      </div>
    </div>
  </form>
</dialog>

<script define:vars={{ rollSlug, imageIndex }}>
  const dialog = document.getElementById(`highlight-dialog-${imageIndex}`);
  const form = document.getElementById(`highlight-form-${imageIndex}`);
  const formContent = document.getElementById(`form-content-${imageIndex}`);
  const feedbackContent = document.getElementById(
    `feedback-content-${imageIndex}`
  );
  const feedbackMessage = document.getElementById(
    `feedback-message-${imageIndex}`
  );
  const cancelButton = document.getElementById(
    `cancel-highlight-${imageIndex}`
  );
  const submitButton = document.getElementById(
    `submit-highlight-${imageIndex}`
  );
  const tryAgainButton = document.getElementById(
    `try-again-button-${imageIndex}`
  );
  const dismissButton = document.getElementById(`dismiss-button-${imageIndex}`);

  function showForm() {
    if (formContent && feedbackContent) {
      formContent.classList.remove("hidden");
      feedbackContent.classList.add("hidden");
      if (submitButton) submitButton.disabled = false;
    }
  }

  function showFeedback(message, isError, prUrl = "") {
    if (
      formContent &&
      feedbackContent &&
      feedbackMessage &&
      tryAgainButton &&
      dismissButton
    ) {
      formContent.classList.add("hidden");
      feedbackContent.classList.remove("hidden");

      feedbackMessage.innerHTML = prUrl
        ? `${message}<br><br><a href="${prUrl}" target="_blank" class="text-blue-600 hover:underline dark:text-blue-400">View Pull Request â†’</a>`
        : message;

      if (isError) {
        feedbackMessage.classList.add("text-red-600");
        tryAgainButton.classList.remove("hidden");
        dismissButton.classList.add("hidden");
      } else {
        feedbackMessage.classList.remove("text-red-600");
        tryAgainButton.classList.add("hidden");
        dismissButton.classList.remove("hidden");
      }
    }
  }

  if (cancelButton && dialog) {
    cancelButton.addEventListener("click", () => {
      dialog.close();
    });
  }

  if (tryAgainButton) {
    tryAgainButton.addEventListener("click", () => {
      showForm();
    });
  }

  if (dismissButton && dialog) {
    dismissButton.addEventListener("click", () => {
      dialog.close();
    });
  }

  dialog?.addEventListener("click", (e) => {
    if (e.target === dialog) {
      dialog.close();
    }
  });

  if (form && submitButton) {
    submitButton.addEventListener("click", async (e) => {
      e.preventDefault();
      if (submitButton.disabled) return;
      submitButton.disabled = true;

      // Get the current user's token
      const user = window.netlifyIdentity.currentUser();
      if (!user) {
        showFeedback(dialog?.dataset.loginRequired || "", true);
        submitButton.disabled = false;
        return;
      }

      const formData = new FormData(form);
      const highlight = formData.get("highlight");

      try {
        const response = await fetch("/.netlify/functions/add-highlight", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${user.token.access_token}`,
          },
          body: JSON.stringify({
            highlight,
            rollSlug,
            imageIndex,
          }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || dialog?.dataset.error || "");
        }

        showFeedback(
          dialog?.dataset.success || "",
          false,
          result.pullRequestUrl
        );
      } catch (error) {
        showFeedback(error.message || dialog?.dataset.error || "", true);
        submitButton.disabled = false;
      }
    });
  }
</script>
